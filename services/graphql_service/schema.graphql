type Contact {
  firmId: String
  contactId: String
  firstName: String!
  middleName: String
  lastName: String!
  primaryEmail: String!
  alternateEmail: String
  primaryAddress: String
  alternateAddress: String
  residency: String
  alias: String
  telephone: String
  fax: String
}

type Address {
    addressId: ID
    line1: String
    line2: String 
    line3: String 
}

type Organization {
    orgId: ID!
    firmId: ID
    alt_address: [Address]
    prim_address: [Address]
    email: String
    fax: String 
    telephone: String 
    creation_date: String 
    entity_name: String
    entity_namechange_date: String 
    entity_namechange_reason: String 
    entity_namechange_prev: String 
    entity_number: Int 
    jurisdiction: String 
}


input CreateContactInput {
    firstName: String!
    middleName: String
    lastName: String!
    primaryEmail: String!
    alternateEmail: String
    primaryAddress: String
    alternateAddress: String
    residency: String
    alias: String
    telephone: String
    fax: String
}
input CreateOrgInput {
    entity_name: String
    email: String
    jurisdiction: String 
}
input DeleteOrgInput {
    orgId: ID 
    firmId: String 
}
input UpdateOrg {
    orgId: ID
    firmId: String
    entity_name: String 
}


type Query {
    listAllContacts: [Contact]
    getContactById(contactId: String): Contact

    listAllOrgs: [Organization]
    getOrgById(orgId: String): Organization 
}

type Mutation {
    createContact(input: CreateContactInput): Contact
    createOrg(input: CreateOrgInput): Organization
    deleteOrg(input: DeleteOrgInput): Organization 
    updateOrg(input: UpdateOrg): Organization 
}